plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = "${mod_version}-mc${minecraft_version}"
group = maven_group

base {
    archivesName = archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        name = "Xander's Maven"
        url = "https://maven.isxander.dev/releases"
    }

    maven { url = 'https://maven.minecraftforge.net/' }

    mavenCentral()
}

loom {
    accessWidenerPath = file("src/main/resources/enriched.accesswidener")
}

fabricApi {
    configureDataGeneration()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    // YetAnotherConfigLib. This is used for Enriched's configuration screen and is therefore a required dependency.
    include(modImplementation "dev.isxander:yet-another-config-lib:${yacl_version}")

    // ModMenu. It isn't required by Enriched, but is here so we can have ModMenu integration.
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    // DevLogin. Allows us to use a Microsoft account within the development environment.
    modImplementation "com.ptsmods:devlogin:${devlogin_version}"

    //TerraBlender
    modImplementation "com.github.glitchfiend:TerraBlender-fabric:${minecraft_version}-${terrablender_version}"
}

processResources {
    inputs.property "mod_version", mod_version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "fabric_loader_version", fabric_loader_version
    inputs.property "fabric_api_version", fabric_api_version
    inputs.property "modmenu_version", modmenu_version

    filesMatching("fabric.mod.json") {
        expand "mod_version": version,
                "minecraft_version": minecraft_version,
                "fabric_loader_version": fabric_loader_version,
                "fabric_api_version": fabric_api_version,
                "modmenu_version": modmenu_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}